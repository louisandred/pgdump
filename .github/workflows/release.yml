name: Release binaries and publish npm

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    name: Build and upload pg_dump binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: macos-13
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build pg_dump binary (Linux/MacOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -e
          mkdir -p dist

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Install PostgreSQL client from official repository
            sudo apt-get update
            sudo apt-get install -y wget ca-certificates

            # Add PostgreSQL official repository
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y postgresql-client-16

            # Copy binary from actual location
            cp /usr/lib/postgresql/16/bin/pg_dump dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}
            chmod +x dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}

            # Verify it works
            dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }} --version

          elif [[ "${{ matrix.os }}" == "macos-13" ]] || [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Install PostgreSQL via Homebrew (native architecture)
            brew install postgresql@16

            # Copy binary
            cp $(brew --prefix postgresql@16)/bin/pg_dump dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}
            chmod +x dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}

            # Verify it works
            dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }} --version
          fi
      - name: Build pg_dump binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Install PostgreSQL via Chocolatey
          choco install postgresql16 --params '/Password:dummy' -y
          
          # Create dist directory
          New-Item -ItemType Directory -Force -Path dist

          # Check if pg_dump.exe exists
          $pgDumpPath = "C:\Program Files\PostgreSQL\16\bin\pg_dump.exe"
          if (Test-Path $pgDumpPath) {
            Write-Host "Found pg_dump.exe at: $pgDumpPath"
          } else {
            Write-Host "ERROR: pg_dump.exe not found at: $pgDumpPath"
            Write-Host "Searching for pg_dump.exe..."
            Get-ChildItem "C:\Program Files\PostgreSQL" -Recurse -Filter "pg_dump.exe" -ErrorAction SilentlyContinue
            exit 1
          }

          # Copy binary
          $destPath = "dist\pg_dump-${{ matrix.os }}-${{ matrix.arch }}.exe"
          Copy-Item $pgDumpPath -Destination $destPath
          Write-Host "Copied to: $destPath"

          # Verify it works (add PostgreSQL bin to PATH temporarily for verification)
          $env:PATH = "C:\Program Files\PostgreSQL\16\bin;$env:PATH"
          & $destPath --version
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Warning: pg_dump verification failed with exit code $LASTEXITCODE, but binary was copied successfully"
          }

      - name: Upload binary as release asset
        if: github.event_name != 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact for testing
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: pg_dump-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 7
          overwrite: true

  publish:
    if: github.event_name != 'workflow_dispatch'
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Typescript project
        run: pnpm run build

      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
