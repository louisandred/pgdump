name: Release binaries and publish npm

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    name: Build and upload pg_dump binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build pg_dump binary
        shell: bash
        run: |
          set -e
          mkdir -p dist

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              URL="https://get.enterprisedb.com/postgresql/postgresql-16.2-1-linux-x64-binaries.tar.gz"
            else
              URL="https://get.enterprisedb.com/postgresql/postgresql-16.2-1-linux-arm64-binaries.tar.gz"
            fi
            curl -L -o pg.tar.gz "$URL"
            tar -xzf pg.tar.gz
            find . -name "pg_dump" -type f -executable
            cp pgsql/bin/pg_dump dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}
            chmod +x dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              # Install via Homebrew for native arm64
              brew install postgresql@16
              cp $(brew --prefix postgresql@16)/bin/pg_dump dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}
            else
              # x64: use EnterpriseDB
              URL="https://get.enterprisedb.com/postgresql/postgresql-16.2-1-osx-binaries.tar.gz"
              curl -L -o pg.tar.gz "$URL"
              tar -xzf pg.tar.gz
              cp pgsql/bin/pg_dump dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}
            fi
            chmod +x dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            URL="https://get.enterprisedb.com/postgresql/postgresql-16.2-1-windows-x64-binaries.zip"
            curl -L -o pg.zip "$URL"
            unzip -q pg.zip
            find . -name "pg_dump.exe"
            cp pgsql/bin/pg_dump.exe dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}.exe
          fi

      - name: Test binaries
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }}.exe --version
          else
            dist/pg_dump-${{ matrix.os }}-${{ matrix.arch }} --version
          fi

      - name: Upload binary as release asset
        if: github.event_name != 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    if: github.event_name != 'workflow_dispatch'
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        run: corepack enable pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Typescript project
        run: pnpm run build

      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
